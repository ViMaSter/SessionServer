!function(e){var t={};function s(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,s),o.l=!0,o.exports}s.m=e,s.c=t,s.d=function(e,t,i){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)s.d(i,o,function(t){return e[t]}.bind(null,o));return i},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=13)}([function(e,t){e.exports=require("events")},function(e,t){e.exports=require("util")},function(e,t,s){var i=t.noop=function(){};function o(e,t,s){this.logFunction=s,this.identifier=e,this.uniqueID=t,this.buffer=[]}t.extend=function(e,t){for(var s in t)e[s]=t[s]},t.eventEmitterListenerCount=s(0).EventEmitter.listenerCount||function(e,t){return e.listeners(t).length},t.bufferAllocUnsafe=Buffer.allocUnsafe?Buffer.allocUnsafe:function(e){return new Buffer(e)},t.bufferFromString=Buffer.from?Buffer.from:function(e,t){return new Buffer(e,t)},t.BufferingLogger=function(e,t){var n=s(5)(e);if(n.enabled){var r=new o(e,t,n),a=r.log.bind(r);return a.printOutput=r.printOutput.bind(r),a.enabled=n.enabled,a}return n.printOutput=i,n},o.prototype.log=function(){return this.buffer.push([new Date,Array.prototype.slice.call(arguments)]),this},o.prototype.clear=function(){return this.buffer=[],this},o.prototype.printOutput=function(e){e||(e=this.logFunction);var t=this.uniqueID;this.buffer.forEach(function(s){var i=s[0].toLocaleString(),o=s[1].slice(),n=o[0];void 0!==n&&null!==n&&(n="%s - %s - "+n.toString(),o.splice(0,1,n,i,t),e.apply(global,o))})}},function(e,t){e.exports=require("http")},function(e,t,s){var i=s(1),o=s(2),n=s(0).EventEmitter,r=s(10),a=s(25),c=s(27).Validation,h=o.bufferAllocUnsafe,l=o.bufferFromString;const u="open";var d="setImmediate"in global?global.setImmediate.bind(global):process.nextTick.bind(process),f=0;function p(e,t,s,i,c){if(this._debug=o.BufferingLogger("websocket:connection",++f),this._debug("constructor"),this._debug.enabled&&function(e,t){if(!e._debug.enabled)return;var s=t.emit;for(var i in t.emit=function(t){e._debug("||| Socket Event  '%s'",t),s.apply(this,arguments)},t)"function"==typeof t[i]&&-1===["emit"].indexOf(i)&&function(s){var i=t[s];t[s]="on"!==s?function(){return e._debug("||| Socket method called:  %s",s),i.apply(this,arguments)}:function(){return e._debug("||| Socket method called:  %s (%s)",s,arguments[0]),i.apply(this,arguments)}}(i)}(this,e),n.call(this),this._pingListenerCount=0,this.on("newListener",function(e){"ping"===e&&this._pingListenerCount++}).on("removeListener",function(e){"ping"===e&&this._pingListenerCount--}),this.config=c,this.socket=e,this.protocol=s,this.extensions=t,this.remoteAddress=e.remoteAddress,this.closeReasonCode=-1,this.closeDescription=null,this.closeEventEmitted=!1,this.maskOutgoingPackets=i,this.maskBytes=h(4),this.frameHeader=h(10),this.bufferList=new a,this.currentFrame=new r(this.maskBytes,this.frameHeader,this.config),this.fragmentationSize=0,this.frameQueue=[],this.connected=!0,this.state=u,this.waitingForCloseResponse=!1,this.receivedEnd=!1,this.closeTimeout=this.config.closeTimeout,this.assembleFragments=this.config.assembleFragments,this.maxReceivedMessageSize=this.config.maxReceivedMessageSize,this.outputBufferFull=!1,this.inputPaused=!1,this.receivedDataHandler=this.processReceivedData.bind(this),this._closeTimerHandler=this.handleCloseTimer.bind(this),this.socket.setNoDelay(this.config.disableNagleAlgorithm),this.socket.setTimeout(0),this.config.keepalive&&!this.config.useNativeKeepalive){if("number"!=typeof this.config.keepaliveInterval)throw new Error("keepaliveInterval must be specified and numeric if keepalive is true.");if(this._keepaliveTimerHandler=this.handleKeepaliveTimer.bind(this),this.setKeepaliveTimer(),this.config.dropConnectionOnKeepaliveTimeout){if("number"!=typeof this.config.keepaliveGracePeriod)throw new Error("keepaliveGracePeriod  must be specified and numeric if dropConnectionOnKeepaliveTimeout is true.");this._gracePeriodTimerHandler=this.handleGracePeriodTimer.bind(this)}}else if(this.config.keepalive&&this.config.useNativeKeepalive){if(!("setKeepAlive"in this.socket))throw new Error("Unable to use native keepalive: unsupported by this version of Node.");this.socket.setKeepAlive(!0,this.config.keepaliveInterval)}this.socket.removeAllListeners("error")}function g(e){return!(e<1e3)&&(e>=1e3&&e<=2999?-1!==[1e3,1001,1002,1003,1007,1008,1009,1010,1011,1012,1013,1014].indexOf(e):e>=3e3&&e<=3999||(e>=4e3&&e<=4999||!(e>=5e3)&&void 0))}p.CLOSE_REASON_NORMAL=1e3,p.CLOSE_REASON_GOING_AWAY=1001,p.CLOSE_REASON_PROTOCOL_ERROR=1002,p.CLOSE_REASON_UNPROCESSABLE_INPUT=1003,p.CLOSE_REASON_RESERVED=1004,p.CLOSE_REASON_NOT_PROVIDED=1005,p.CLOSE_REASON_ABNORMAL=1006,p.CLOSE_REASON_INVALID_DATA=1007,p.CLOSE_REASON_POLICY_VIOLATION=1008,p.CLOSE_REASON_MESSAGE_TOO_BIG=1009,p.CLOSE_REASON_EXTENSION_REQUIRED=1010,p.CLOSE_REASON_INTERNAL_SERVER_ERROR=1011,p.CLOSE_REASON_TLS_HANDSHAKE_FAILED=1015,p.CLOSE_DESCRIPTIONS={1000:"Normal connection closure",1001:"Remote peer is going away",1002:"Protocol error",1003:"Unprocessable input",1004:"Reserved",1005:"Reason not provided",1006:"Abnormal closure, no further detail available",1007:"Invalid data received",1008:"Policy violation",1009:"Message too big",1010:"Extension requested by client is required",1011:"Internal Server Error",1015:"TLS Handshake Failed"},i.inherits(p,n),p.prototype._addSocketEventListeners=function(){this.socket.on("error",this.handleSocketError.bind(this)),this.socket.on("end",this.handleSocketEnd.bind(this)),this.socket.on("close",this.handleSocketClose.bind(this)),this.socket.on("drain",this.handleSocketDrain.bind(this)),this.socket.on("pause",this.handleSocketPause.bind(this)),this.socket.on("resume",this.handleSocketResume.bind(this)),this.socket.on("data",this.handleSocketData.bind(this))},p.prototype.setKeepaliveTimer=function(){this._debug("setKeepaliveTimer"),this.config.keepalive&&!this.config.useNativeKeepalive&&(this.clearKeepaliveTimer(),this.clearGracePeriodTimer(),this._keepaliveTimeoutID=setTimeout(this._keepaliveTimerHandler,this.config.keepaliveInterval))},p.prototype.clearKeepaliveTimer=function(){this._keepaliveTimeoutID&&clearTimeout(this._keepaliveTimeoutID)},p.prototype.handleKeepaliveTimer=function(){this._debug("handleKeepaliveTimer"),this._keepaliveTimeoutID=null,this.ping(),this.config.dropConnectionOnKeepaliveTimeout?this.setGracePeriodTimer():this.setKeepaliveTimer()},p.prototype.setGracePeriodTimer=function(){this._debug("setGracePeriodTimer"),this.clearGracePeriodTimer(),this._gracePeriodTimeoutID=setTimeout(this._gracePeriodTimerHandler,this.config.keepaliveGracePeriod)},p.prototype.clearGracePeriodTimer=function(){this._gracePeriodTimeoutID&&clearTimeout(this._gracePeriodTimeoutID)},p.prototype.handleGracePeriodTimer=function(){this._debug("handleGracePeriodTimer"),this._gracePeriodTimeoutID=null,this.drop(p.CLOSE_REASON_ABNORMAL,"Peer not responding.",!0)},p.prototype.handleSocketData=function(e){this._debug("handleSocketData"),this.setKeepaliveTimer(),this.bufferList.write(e),this.processReceivedData()},p.prototype.processReceivedData=function(){if(this._debug("processReceivedData"),this.connected&&!this.inputPaused){var e=this.currentFrame;if(e.addData(this.bufferList)){var t=this;if(e.protocolError)return this._debug("-- protocol error"),void process.nextTick(function(){t.drop(p.CLOSE_REASON_PROTOCOL_ERROR,e.dropReason)});if(e.frameTooLarge)return this._debug("-- frame too large"),void process.nextTick(function(){t.drop(p.CLOSE_REASON_MESSAGE_TOO_BIG,e.dropReason)});if(e.rsv1||e.rsv2||e.rsv3)return this._debug("-- illegal rsv flag"),void process.nextTick(function(){t.drop(p.CLOSE_REASON_PROTOCOL_ERROR,"Unsupported usage of rsv bits without negotiated extension.")});this.assembleFragments||(this._debug("-- emitting frame"),process.nextTick(function(){t.emit("frame",e)})),process.nextTick(function(){t.processFrame(e)}),this.currentFrame=new r(this.maskBytes,this.frameHeader,this.config),this.bufferList.length>0&&d(this.receivedDataHandler)}else this._debug("-- insufficient data for frame")}},p.prototype.handleSocketError=function(e){this._debug("handleSocketError: %j",e),"closed"!==this.state?(this.closeReasonCode=p.CLOSE_REASON_ABNORMAL,this.closeDescription="Socket Error: "+e.syscall+" "+e.code,this.connected=!1,this.state="closed",this.fragmentationSize=0,o.eventEmitterListenerCount(this,"error")>0&&this.emit("error",e),this.socket.destroy(e),this._debug.printOutput()):this._debug("  --- Socket 'error' after 'close'")},p.prototype.handleSocketEnd=function(){this._debug("handleSocketEnd: received socket end.  state = %s",this.state),this.receivedEnd=!0,"closed"!==this.state?"peer_requested_close"!==this.state&&"ending"!==this.state&&(this._debug("  --- UNEXPECTED socket end."),this.socket.end()):this._debug("  --- Socket 'end' after 'close'")},p.prototype.handleSocketClose=function(e){this._debug("handleSocketClose: received socket close"),this.socketHadError=e,this.connected=!1,this.state="closed",-1===this.closeReasonCode&&(this.closeReasonCode=p.CLOSE_REASON_ABNORMAL,this.closeDescription="Connection dropped by remote peer."),this.clearCloseTimer(),this.clearKeepaliveTimer(),this.clearGracePeriodTimer(),this.closeEventEmitted||(this.closeEventEmitted=!0,this._debug("-- Emitting WebSocketConnection close event"),this.emit("close",this.closeReasonCode,this.closeDescription))},p.prototype.handleSocketDrain=function(){this._debug("handleSocketDrain: socket drain event"),this.outputBufferFull=!1,this.emit("drain")},p.prototype.handleSocketPause=function(){this._debug("handleSocketPause: socket pause event"),this.inputPaused=!0,this.emit("pause")},p.prototype.handleSocketResume=function(){this._debug("handleSocketResume: socket resume event"),this.inputPaused=!1,this.emit("resume"),this.processReceivedData()},p.prototype.pause=function(){this._debug("pause: pause requested"),this.socket.pause()},p.prototype.resume=function(){this._debug("resume: resume requested"),this.socket.resume()},p.prototype.close=function(e,t){if(this.connected){if(this._debug("close: Initating clean WebSocket close sequence."),"number"!=typeof e&&(e=p.CLOSE_REASON_NORMAL),!g(e))throw new Error("Close code "+e+" is not valid.");"string"!=typeof t&&(t=p.CLOSE_DESCRIPTIONS[e]),this.closeReasonCode=e,this.closeDescription=t,this.setCloseTimer(),this.sendCloseFrame(this.closeReasonCode,this.closeDescription),this.state="ending",this.connected=!1}},p.prototype.drop=function(e,t,s){this._debug("drop"),"number"!=typeof e&&(e=p.CLOSE_REASON_PROTOCOL_ERROR),"string"!=typeof t&&(t=p.CLOSE_DESCRIPTIONS[e]),this._debug("Forcefully dropping connection. skipCloseFrame: %s, code: %d, description: %s",s,e,t),this.closeReasonCode=e,this.closeDescription=t,this.frameQueue=[],this.fragmentationSize=0,s||this.sendCloseFrame(e,t),this.connected=!1,this.state="closed",this.clearCloseTimer(),this.clearKeepaliveTimer(),this.clearGracePeriodTimer(),this.closeEventEmitted||(this.closeEventEmitted=!0,this._debug("Emitting WebSocketConnection close event"),this.emit("close",this.closeReasonCode,this.closeDescription)),this._debug("Drop: destroying socket"),this.socket.destroy()},p.prototype.setCloseTimer=function(){this._debug("setCloseTimer"),this.clearCloseTimer(),this._debug("Setting close timer"),this.waitingForCloseResponse=!0,this.closeTimer=setTimeout(this._closeTimerHandler,this.closeTimeout)},p.prototype.clearCloseTimer=function(){this._debug("clearCloseTimer"),this.closeTimer&&(this._debug("Clearing close timer"),clearTimeout(this.closeTimer),this.waitingForCloseResponse=!1,this.closeTimer=null)},p.prototype.handleCloseTimer=function(){this._debug("handleCloseTimer"),this.closeTimer=null,this.waitingForCloseResponse&&(this._debug("Close response not received from client.  Forcing socket end."),this.waitingForCloseResponse=!1,this.state="closed",this.socket.end())},p.prototype.processFrame=function(e){if(this._debug("processFrame"),this._debug(" -- frame: %s",e),0!==this.frameQueue.length&&e.opcode>0&&e.opcode<8)this.drop(p.CLOSE_REASON_PROTOCOL_ERROR,"Illegal frame opcode 0x"+e.opcode.toString(16)+" received in middle of fragmented message.");else switch(e.opcode){case 2:this._debug("-- Binary Frame"),this.assembleFragments&&(e.fin?(this._debug("---- Emitting 'message' event"),this.emit("message",{type:"binary",binaryData:e.binaryPayload})):(this.frameQueue.push(e),this.fragmentationSize=e.length));break;case 1:if(this._debug("-- Text Frame"),this.assembleFragments)if(e.fin){if(!c.isValidUTF8(e.binaryPayload))return void this.drop(p.CLOSE_REASON_INVALID_DATA,"Invalid UTF-8 Data Received");this._debug("---- Emitting 'message' event"),this.emit("message",{type:"utf8",utf8Data:e.binaryPayload.toString("utf8")})}else this.frameQueue.push(e),this.fragmentationSize=e.length;break;case 0:if(this._debug("-- Continuation Frame"),this.assembleFragments){if(0===this.frameQueue.length)return void this.drop(p.CLOSE_REASON_PROTOCOL_ERROR,"Unexpected Continuation Frame");if(this.fragmentationSize+=e.length,this.fragmentationSize>this.maxReceivedMessageSize)return void this.drop(p.CLOSE_REASON_MESSAGE_TOO_BIG,"Maximum message size exceeded.");if(this.frameQueue.push(e),e.fin){var t=0,s=h(this.fragmentationSize),i=this.frameQueue[0].opcode;switch(this.frameQueue.forEach(function(e){e.binaryPayload.copy(s,t),t+=e.binaryPayload.length}),this.frameQueue=[],this.fragmentationSize=0,i){case 2:this.emit("message",{type:"binary",binaryData:s});break;case 1:if(!c.isValidUTF8(s))return void this.drop(p.CLOSE_REASON_INVALID_DATA,"Invalid UTF-8 Data Received");this.emit("message",{type:"utf8",utf8Data:s.toString("utf8")});break;default:return void this.drop(p.CLOSE_REASON_PROTOCOL_ERROR,"Unexpected first opcode in fragmentation sequence: 0x"+i.toString(16))}}}break;case 9:if(this._debug("-- Ping Frame"),this._pingListenerCount>0){var o=!1;this.emit("ping",function(){o=!0},e.binaryPayload),o||this.pong(e.binaryPayload)}else this.pong(e.binaryPayload);break;case 10:this._debug("-- Pong Frame"),this.emit("pong",e.binaryPayload);break;case 8:if(this._debug("-- Close Frame"),this.waitingForCloseResponse)return this._debug("---- Got close response from peer.  Completing closing handshake."),this.clearCloseTimer(),this.waitingForCloseResponse=!1,this.state="closed",void this.socket.end();var n;if(this._debug("---- Closing handshake initiated by peer."),this.state="peer_requested_close",e.invalidCloseFrameLength?(this.closeReasonCode=1005,n=p.CLOSE_REASON_PROTOCOL_ERROR):-1===e.closeStatus||g(e.closeStatus)?(this.closeReasonCode=e.closeStatus,n=p.CLOSE_REASON_NORMAL):(this.closeReasonCode=e.closeStatus,n=p.CLOSE_REASON_PROTOCOL_ERROR),e.binaryPayload.length>1){if(!c.isValidUTF8(e.binaryPayload))return void this.drop(p.CLOSE_REASON_INVALID_DATA,"Invalid UTF-8 Data Received");this.closeDescription=e.binaryPayload.toString("utf8")}else this.closeDescription=p.CLOSE_DESCRIPTIONS[this.closeReasonCode];this._debug("------ Remote peer %s - code: %d - %s - close frame payload length: %d",this.remoteAddress,this.closeReasonCode,this.closeDescription,e.length),this._debug("------ responding to remote peer's close request."),this.sendCloseFrame(n,null),this.connected=!1;break;default:this._debug("-- Unrecognized Opcode %d",e.opcode),this.drop(p.CLOSE_REASON_PROTOCOL_ERROR,"Unrecognized Opcode: 0x"+e.opcode.toString(16))}},p.prototype.send=function(e,t){if(this._debug("send"),Buffer.isBuffer(e))this.sendBytes(e,t);else{if("function"!=typeof e.toString)throw new Error("Data provided must either be a Node Buffer or implement toString()");this.sendUTF(e,t)}},p.prototype.sendUTF=function(e,t){e=l(e.toString(),"utf8"),this._debug("sendUTF: %d bytes",e.length);var s=new r(this.maskBytes,this.frameHeader,this.config);s.opcode=1,s.binaryPayload=e,this.fragmentAndSend(s,t)},p.prototype.sendBytes=function(e,t){if(this._debug("sendBytes"),!Buffer.isBuffer(e))throw new Error("You must pass a Node Buffer object to WebSocketConnection.prototype.sendBytes()");var s=new r(this.maskBytes,this.frameHeader,this.config);s.opcode=2,s.binaryPayload=e,this.fragmentAndSend(s,t)},p.prototype.ping=function(e){this._debug("ping");var t=new r(this.maskBytes,this.frameHeader,this.config);t.opcode=9,t.fin=!0,e&&(Buffer.isBuffer(e)||(e=l(e.toString(),"utf8")),e.length>125&&(this._debug("WebSocket: Data for ping is longer than 125 bytes.  Truncating."),e=e.slice(0,124)),t.binaryPayload=e),this.sendFrame(t)},p.prototype.pong=function(e){this._debug("pong");var t=new r(this.maskBytes,this.frameHeader,this.config);t.opcode=10,Buffer.isBuffer(e)&&e.length>125&&(this._debug("WebSocket: Data for pong is longer than 125 bytes.  Truncating."),e=e.slice(0,124)),t.binaryPayload=e,t.fin=!0,this.sendFrame(t)},p.prototype.fragmentAndSend=function(e,t){if(this._debug("fragmentAndSend"),e.opcode>7)throw new Error("You cannot fragment control frames.");var s=this.config.fragmentationThreshold,i=e.binaryPayload.length;if(!this.config.fragmentOutgoingMessages||e.binaryPayload&&i<=s)return e.fin=!0,void this.sendFrame(e,t);for(var o=Math.ceil(i/s),n=0,a=function(e){e?"function"==typeof t&&(t(e),t=null):++n===o&&"function"==typeof t&&t()},c=1;c<=o;c++){var h=new r(this.maskBytes,this.frameHeader,this.config);h.opcode=1===c?e.opcode:0,h.fin=c===o;var l=c===o?i-s*(c-1):s,u=s*(c-1);h.binaryPayload=e.binaryPayload.slice(u,u+l),this.sendFrame(h,a)}},p.prototype.sendCloseFrame=function(e,t,s){if("number"!=typeof e&&(e=p.CLOSE_REASON_NORMAL),this._debug("sendCloseFrame state: %s, reasonCode: %d, description: %s",this.state,e,t),this.state===u||"peer_requested_close"===this.state){var i=new r(this.maskBytes,this.frameHeader,this.config);i.fin=!0,i.opcode=8,i.closeStatus=e,"string"==typeof t&&(i.binaryPayload=l(t,"utf8")),this.sendFrame(i,s),this.socket.end()}},p.prototype.sendFrame=function(e,t){this._debug("sendFrame"),e.mask=this.maskOutgoingPackets;var s=this.socket.write(e.toBuffer(),t);return this.outputBufferFull=!s,s},e.exports=p},function(e,t,s){"undefined"!=typeof process&&"renderer"===process.type?e.exports=s(17):e.exports=s(19)},function(e,t,s){var i;function o(e){function s(){if(s.enabled){var e=s,o=+new Date,n=o-(i||o);e.diff=n,e.prev=i,e.curr=o,i=o;for(var r=new Array(arguments.length),a=0;a<r.length;a++)r[a]=arguments[a];r[0]=t.coerce(r[0]),"string"!=typeof r[0]&&r.unshift("%O");var c=0;r[0]=r[0].replace(/%([a-zA-Z%])/g,function(s,i){if("%%"===s)return s;c++;var o=t.formatters[i];if("function"==typeof o){var n=r[c];s=o.call(e,n),r.splice(c,1),c--}return s}),t.formatArgs.call(e,r),(s.log||t.log||console.log.bind(console)).apply(e,r)}}return s.namespace=e,s.enabled=t.enabled(e),s.useColors=t.useColors(),s.color=function(e){var s,i=0;for(s in e)i=(i<<5)-i+e.charCodeAt(s),i|=0;return t.colors[Math.abs(i)%t.colors.length]}(e),"function"==typeof t.init&&t.init(s),s}(t=e.exports=o.debug=o.default=o).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){t.save(e),t.names=[],t.skips=[];for(var s=("string"==typeof e?e:"").split(/[\s,]+/),i=s.length,o=0;o<i;o++)s[o]&&("-"===(e=s[o].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){var s,i;for(s=0,i=t.skips.length;s<i;s++)if(t.skips[s].test(e))return!1;for(s=0,i=t.names.length;s<i;s++)if(t.names[s].test(e))return!0;return!1},t.humanize=s(18),t.names=[],t.skips=[],t.formatters={}},function(e,t,s){for(var i=s(8),o=s(1),n=s(9),r=s(0).EventEmitter,a=s(4),c=/,\s*/,h=/;\s*/,l=/[\r\n]/g,u=/,\s*/,d=["(",")","<",">","@",",",";",":","\\",'"',"/","[","]","?","=","{","}"," ",String.fromCharCode(9)],f=[String.fromCharCode(127)],p=0;p<31;p++)f.push(String.fromCharCode(p));var g=/([\x00-\x20\x22\x28\x29\x2c\x2f\x3a-\x3f\x40\x5b-\x5e\x7b\x7d\x7f])/,m=/[^\x21\x23-\x2b\x2d-\x3a\x3c-\x5b\x5d-\x7e]/,v=/^"[^"]*"$/,y=/[\x00-\x20\x3b]/g,b=/[;,] */,S={100:"Continue",101:"Switching Protocols",200:"OK",201:"Created",203:"Non-Authoritative Information",204:"No Content",205:"Reset Content",206:"Partial Content",300:"Multiple Choices",301:"Moved Permanently",302:"Found",303:"See Other",304:"Not Modified",305:"Use Proxy",307:"Temporary Redirect",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",406:"Not Acceptable",407:"Proxy Authorization Required",408:"Request Timeout",409:"Conflict",410:"Gone",411:"Length Required",412:"Precondition Failed",413:"Request Entity Too Long",414:"Request-URI Too Long",415:"Unsupported Media Type",416:"Requested Range Not Satisfiable",417:"Expectation Failed",426:"Upgrade Required",500:"Internal Server Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Gateway Timeout",505:"HTTP Version Not Supported"};function _(e,t,s){r.call(this),this.socket=e,this.httpRequest=t,this.resource=t.url,this.remoteAddress=e.remoteAddress,this.remoteAddresses=[this.remoteAddress],this.serverConfig=s,this._socketIsClosing=!1,this._socketCloseHandler=this._handleSocketCloseBeforeAccept.bind(this),this.socket.on("end",this._socketCloseHandler),this.socket.on("close",this._socketCloseHandler),this._resolved=!1}function E(e){process.nextTick(function(){e.drop(1006,"TCP connection lost before handshake completed.",!0)})}o.inherits(_,r),_.prototype.readHandshake=function(){var e=this,t=this.httpRequest;if(this.resourceURL=n.parse(this.resource,!0),this.host=t.headers.host,!this.host)throw new Error("Client must provide a Host header.");if(this.key=t.headers["sec-websocket-key"],!this.key)throw new Error("Client must provide a value for Sec-WebSocket-Key.");if(this.webSocketVersion=parseInt(t.headers["sec-websocket-version"],10),!this.webSocketVersion||isNaN(this.webSocketVersion))throw new Error("Client must provide a value for Sec-WebSocket-Version.");switch(this.webSocketVersion){case 8:case 13:break;default:var s=new Error("Unsupported websocket client version: "+this.webSocketVersion+"Only versions 8 and 13 are supported.");throw s.httpCode=426,s.headers={"Sec-WebSocket-Version":"13"},s}13===this.webSocketVersion?this.origin=t.headers.origin:8===this.webSocketVersion&&(this.origin=t.headers["sec-websocket-origin"]);var i=t.headers["sec-websocket-protocol"];(this.protocolFullCaseMap={},this.requestedProtocols=[],i)&&i.split(c).forEach(function(t){var s=t.toLocaleLowerCase();e.requestedProtocols.push(s),e.protocolFullCaseMap[s]=t});if(!this.serverConfig.ignoreXForwardedFor&&t.headers["x-forwarded-for"]){var o=this.remoteAddress;this.remoteAddresses=t.headers["x-forwarded-for"].split(u),this.remoteAddresses.push(o),this.remoteAddress=this.remoteAddresses[0]}var r=t.headers["sec-websocket-extensions"];this.requestedExtensions=this.parseExtensions(r);var a=t.headers.cookie;this.cookies=this.parseCookies(a)},_.prototype.parseExtensions=function(e){if(!e||0===e.length)return[];var t=e.toLocaleLowerCase().split(c);return t.forEach(function(e,t,s){var i=e.split(h),o=i[0],n=i.slice(1);n.forEach(function(e,t,s){var i=e.split("="),o={name:i[0],value:i[1]};s.splice(t,1,o)});var r={name:o,params:n};s.splice(t,1,r)}),t},_.prototype.parseCookies=function(e){if(!e||"string"!=typeof e)return[];var t=[];return e.split(b).forEach(function(e){var s=e.indexOf("=");if(-1!==s){var i=e.substr(0,s).trim(),o=e.substr(++s,e.length).trim();'"'===o[0]&&(o=o.slice(1,-1)),t.push({name:i,value:decodeURIComponent(o)})}else t.push({name:e,value:null})}),t},_.prototype.accept=function(e,t,s){var o;this._verifyResolution(),e?void 0===(o=this.protocolFullCaseMap[e.toLocaleLowerCase()])&&(o=e):o=e,this.protocolFullCaseMap=null;var n=i.createHash("sha1");n.update(this.key+"258EAFA5-E914-47DA-95CA-C5AB0DC85B11");var r="HTTP/1.1 101 Switching Protocols\r\nUpgrade: websocket\r\nConnection: Upgrade\r\nSec-WebSocket-Accept: "+n.digest("base64")+"\r\n";if(o){for(var c=0;c<o.length;c++){var h=o.charCodeAt(c),u=o.charAt(c);if(h<33||h>126||-1!==d.indexOf(u))throw this.reject(500),new Error('Illegal character "'+String.fromCharCode(u)+'" in subprotocol.')}if(-1===this.requestedProtocols.indexOf(e))throw this.reject(500),new Error("Specified protocol was not requested by the client.");o=o.replace(l,""),r+="Sec-WebSocket-Protocol: "+o+"\r\n"}if(this.requestedProtocols=null,t&&(t=t.replace(l,""),13===this.webSocketVersion?r+="Origin: "+t+"\r\n":8===this.webSocketVersion&&(r+="Sec-WebSocket-Origin: "+t+"\r\n")),s){if(!Array.isArray(s))throw this.reject(500),new Error('Value supplied for "cookies" argument must be an array.');var f={};s.forEach(function(e){if(!e.name||!e.value)throw this.reject(500),new Error('Each cookie to set must at least provide a "name" and "value"');if(e.name=e.name.replace(y,""),e.value=e.value.replace(y,""),f[e.name])throw this.reject(500),new Error("You may not specify the same cookie name twice.");f[e.name]=!0;var t=e.name.match(g);if(t)throw this.reject(500),new Error("Illegal character "+t[0]+" in cookie name");if(t=e.value.match(v)?e.value.slice(1,-1).match(m):e.value.match(m))throw this.reject(500),new Error("Illegal character "+t[0]+" in cookie value");var s=[e.name+"="+e.value];if(e.path){if(t=e.path.match(y))throw this.reject(500),new Error("Illegal character "+t[0]+" in cookie path");s.push("Path="+e.path)}if(e.domain){if("string"!=typeof e.domain)throw this.reject(500),new Error("Domain must be specified and must be a string.");if(t=e.domain.match(y))throw this.reject(500),new Error("Illegal character "+t[0]+" in cookie domain");s.push("Domain="+e.domain.toLowerCase())}if(e.expires){if(!(e.expires instanceof Date))throw this.reject(500),new Error('Value supplied for cookie "expires" must be a vaild date object');s.push("Expires="+e.expires.toGMTString())}if(e.maxage){var i=e.maxage;if("string"==typeof i&&(i=parseInt(i,10)),isNaN(i)||i<=0)throw this.reject(500),new Error('Value supplied for cookie "maxage" must be a non-zero number');i=Math.round(i),s.push("Max-Age="+i.toString(10))}if(e.secure){if("boolean"!=typeof e.secure)throw this.reject(500),new Error('Value supplied for cookie "secure" must be of type boolean');s.push("Secure")}if(e.httponly){if("boolean"!=typeof e.httponly)throw this.reject(500),new Error('Value supplied for cookie "httponly" must be of type boolean');s.push("HttpOnly")}r+="Set-Cookie: "+s.join(";")+"\r\n"}.bind(this))}this._resolved=!0,this.emit("requestResolved",this),r+="\r\n";var p=new a(this.socket,[],e,!1,this.serverConfig);p.webSocketVersion=this.webSocketVersion,p.remoteAddress=this.remoteAddress,p.remoteAddresses=this.remoteAddresses;var b=this;return this._socketIsClosing?E(p):this.socket.write(r,"ascii",function(e){e?E(p):(b._removeSocketCloseListeners(),p._addSocketEventListeners())}),this.emit("requestAccepted",p),p},_.prototype.reject=function(e,t,s){this._verifyResolution(),this._resolved=!0,this.emit("requestResolved",this),"number"!=typeof e&&(e=403);var i="HTTP/1.1 "+e+" "+S[e]+"\r\nConnection: close\r\n";if(t&&(i+="X-WebSocket-Reject-Reason: "+(t=t.replace(l,""))+"\r\n"),s)for(var o in s){var n=s[o].toString().replace(l,"");i+=o.replace(l,"")+": "+n+"\r\n"}i+="\r\n",this.socket.end(i,"ascii"),this.emit("requestRejected",this)},_.prototype._handleSocketCloseBeforeAccept=function(){this._socketIsClosing=!0,this._removeSocketCloseListeners()},_.prototype._removeSocketCloseListeners=function(){this.socket.removeListener("end",this._socketCloseHandler),this.socket.removeListener("close",this._socketCloseHandler)},_.prototype._verifyResolution=function(){if(this._resolved)throw new Error("WebSocketRequest may only be accepted or rejected one time.")},e.exports=_},function(e,t){e.exports=require("crypto")},function(e,t){e.exports=require("url")},function(e,t,s){var i=s(23).BufferUtil,o=s(2).bufferAllocUnsafe;const n=1;function r(e,t,s){this.maskBytes=e,this.frameHeader=t,this.config=s,this.maxReceivedFrameSize=s.maxReceivedFrameSize,this.protocolError=!1,this.frameTooLarge=!1,this.invalidCloseFrameLength=!1,this.parseState=n,this.closeStatus=-1}r.prototype.addData=function(e){if(this.parseState===n&&e.length>=2){e.joinInto(this.frameHeader,0,0,2),e.advance(2);var t=this.frameHeader[0],s=this.frameHeader[1];if(this.fin=Boolean(128&t),this.rsv1=Boolean(64&t),this.rsv2=Boolean(32&t),this.rsv3=Boolean(16&t),this.mask=Boolean(128&s),this.opcode=15&t,this.length=127&s,this.opcode>=8){if(this.length>125)return this.protocolError=!0,this.dropReason="Illegal control frame longer than 125 bytes.",!0;if(!this.fin)return this.protocolError=!0,this.dropReason="Control frames must not be fragmented.",!0}126===this.length?this.parseState=2:127===this.length?this.parseState=3:this.parseState=4}if(2===this.parseState)e.length>=2&&(e.joinInto(this.frameHeader,2,0,2),e.advance(2),this.length=this.frameHeader.readUInt16BE(2),this.parseState=4);else if(3===this.parseState&&e.length>=8){e.joinInto(this.frameHeader,2,0,8),e.advance(8);var r=[this.frameHeader.readUInt32BE(2),this.frameHeader.readUInt32BE(6)];if(0!==r[0])return this.protocolError=!0,this.dropReason="Unsupported 64-bit length frame received",!0;this.length=r[1],this.parseState=4}if(4===this.parseState&&(this.mask?e.length>=4&&(e.joinInto(this.maskBytes,0,0,4),e.advance(4),this.parseState=5):this.parseState=5),5===this.parseState){if(this.length>this.maxReceivedFrameSize)return this.frameTooLarge=!0,this.dropReason="Frame size of "+this.length.toString(10)+" bytes exceeds maximum accepted frame size",!0;if(0===this.length)return this.binaryPayload=o(0),this.parseState=6,!0;if(e.length>=this.length)return this.binaryPayload=e.take(this.length),e.advance(this.length),this.mask&&i.unmask(this.binaryPayload,this.maskBytes),8===this.opcode&&(1===this.length&&(this.binaryPayload=o(0),this.invalidCloseFrameLength=!0),this.length>=2&&(this.closeStatus=this.binaryPayload.readUInt16BE(0),this.binaryPayload=this.binaryPayload.slice(2))),this.parseState=6,!0}return!1},r.prototype.throwAwayPayload=function(e){return e.length>=this.length&&(e.advance(this.length),this.parseState=6,!0)},r.prototype.toBuffer=function(e){var t,s,n,r=2,a=0,c=0;this.fin&&(a|=128),this.rsv1&&(a|=64),this.rsv2&&(a|=32),this.rsv3&&(a|=16),this.mask&&(c|=128),a|=15&this.opcode,8===this.opcode?(this.length=2,this.binaryPayload&&(this.length+=this.binaryPayload.length),(s=o(this.length)).writeUInt16BE(this.closeStatus,0),this.length>2&&this.binaryPayload.copy(s,2)):this.binaryPayload?(s=this.binaryPayload,this.length=s.length):this.length=0,this.length<=125?c|=127&this.length:this.length>125&&this.length<=65535?(c|=126,r+=2):this.length>65535&&(c|=127,r+=8);var h=o(this.length+r+(this.mask?4:0));return h[0]=a,h[1]=c,n=2,this.length>125&&this.length<=65535?(h.writeUInt16BE(this.length,n),n+=2):this.length>65535&&(h.writeUInt32BE(0,n),h.writeUInt32BE(this.length,n+4),n+=8),this.mask?(t=e?0:4294967295*Math.random()>>>0,this.maskBytes.writeUInt32BE(t,0),this.maskBytes.copy(h,n),n+=4,s&&i.mask(s,this.maskBytes,h,n,this.length)):s&&s.copy(h,n),h},r.prototype.toString=function(){return"Opcode: "+this.opcode+", fin: "+this.fin+", length: "+this.length+", hasPayload: "+Boolean(this.binaryPayload)+", masked: "+this.mask},e.exports=r},function(e,t,s){var i=s(2),o=i.extend,n=s(1),r=s(0).EventEmitter,a=s(3),c=s(12),h=s(9),l=s(8),u=s(4),d=i.bufferAllocUnsafe,f=["(",")","<",">","@",",",";",":","\\",'"',"/","[","]","?","=","{","}"," ",String.fromCharCode(9)],p=["hostname","port","method","path","headers"];function g(e){var t;(r.call(this),this.config={maxReceivedFrameSize:1048576,maxReceivedMessageSize:8388608,fragmentOutgoingMessages:!0,fragmentationThreshold:16384,webSocketVersion:13,assembleFragments:!0,disableNagleAlgorithm:!0,closeTimeout:5e3,tlsOptions:{}},e)&&(e.tlsOptions?(t=e.tlsOptions,delete e.tlsOptions):t={},o(this.config,e),o(this.config.tlsOptions,t));switch(this._req=null,this.config.webSocketVersion){case 8:case 13:break;default:throw new Error("Requested webSocketVersion is not supported. Allowed values are 8 and 13.")}}n.inherits(g,r),g.prototype.connect=function(e,t,s,n,r){var l=this;if("string"==typeof t&&(t=t.length>0?[t]:[]),t instanceof Array||(t=[]),this.protocols=t,this.origin=s,this.url="string"==typeof e?h.parse(e):e,!this.url.protocol)throw new Error("You must specify a full WebSocket URL, including protocol.");if(!this.url.host)throw new Error("You must specify a full WebSocket URL, including hostname. Relative URLs are not supported.");this.secure="wss:"===this.url.protocol,this.protocols.forEach(function(e){for(var t=0;t<e.length;t++){var s=e.charCodeAt(t),i=e.charAt(t);if(s<33||s>126||-1!==f.indexOf(i))throw new Error('Protocol list contains invalid character "'+String.fromCharCode(s)+'"')}});this.url.port||(this.url.port={"ws:":"80","wss:":"443"}[this.url.protocol]);for(var u=d(16),g=0;g<16;g++)u[g]=Math.round(255*Math.random());this.base64nonce=u.toString("base64");var m=this.url.hostname;("ws:"===this.url.protocol&&"80"!==this.url.port||"wss:"===this.url.protocol&&"443"!==this.url.port)&&(m+=":"+this.url.port);var v,y={};function b(e){l._req=null,l.emit("connectFailed",e)}this.secure&&this.config.tlsOptions.hasOwnProperty("headers")&&o(y,this.config.tlsOptions.headers),n&&o(y,n),o(y,{Upgrade:"websocket",Connection:"Upgrade","Sec-WebSocket-Version":this.config.webSocketVersion.toString(10),"Sec-WebSocket-Key":this.base64nonce,Host:y.Host||m}),this.protocols.length>0&&(y["Sec-WebSocket-Protocol"]=this.protocols.join(", ")),this.origin&&(13===this.config.webSocketVersion?y.Origin=this.origin:8===this.config.webSocketVersion&&(y["Sec-WebSocket-Origin"]=this.origin)),v=this.url.pathname?this.url.path:this.url.path?"/"+this.url.path:"/";var S={agent:!1};if(r&&o(S,r),o(S,{hostname:this.url.hostname,port:this.url.port,method:"GET",path:v,headers:y}),this.secure){var _=this.config.tlsOptions;for(var E in _)_.hasOwnProperty(E)&&-1===p.indexOf(E)&&(S[E]=_[E])}var k=this._req=(this.secure?c:a).request(S);k.on("upgrade",function(e,t,s){l._req=null,k.removeListener("error",b),l.socket=t,l.response=e,l.firstDataChunk=s,l.validateHandshake()}),k.on("error",b),k.on("response",function(e){if(l._req=null,i.eventEmitterListenerCount(l,"httpResponse")>0)l.emit("httpResponse",e,l),e.socket&&e.socket.end();else{var t=[];for(var s in e.headers)t.push(s+": "+e.headers[s]);l.failHandshake("Server responded with a non-101 status: "+e.statusCode+" "+e.statusMessage+"\nResponse Headers Follow:\n"+t.join("\n")+"\n")}}),k.end()},g.prototype.validateHandshake=function(){var e=this.response.headers;if(this.protocols.length>0){if(this.protocol=e["sec-websocket-protocol"],!this.protocol)return void this.failHandshake("Expected a Sec-WebSocket-Protocol header.");if(-1===this.protocols.indexOf(this.protocol))return void this.failHandshake("Server did not respond with a requested protocol.")}if(e.connection&&"upgrade"===e.connection.toLocaleLowerCase())if(e.upgrade&&"websocket"===e.upgrade.toLocaleLowerCase()){var t=l.createHash("sha1");t.update(this.base64nonce+"258EAFA5-E914-47DA-95CA-C5AB0DC85B11");var s=t.digest("base64");e["sec-websocket-accept"]?e["sec-websocket-accept"]===s?this.succeedHandshake():this.failHandshake("Sec-WebSocket-Accept header from server didn't match expected value of "+s):this.failHandshake("Expected Sec-WebSocket-Accept header from server")}else this.failHandshake("Expected an Upgrade: websocket header from the server");else this.failHandshake("Expected a Connection: Upgrade header from the server")},g.prototype.failHandshake=function(e){this.socket&&this.socket.writable&&this.socket.end(),this.emit("connectFailed",new Error(e))},g.prototype.succeedHandshake=function(){var e=new u(this.socket,[],this.protocol,!0,this.config);e.webSocketVersion=this.config.webSocketVersion,e._addSocketEventListeners(),this.emit("connect",e),this.firstDataChunk.length>0&&e.handleSocketData(this.firstDataChunk),this.firstDataChunk=null},g.prototype.abort=function(){this._req&&this._req.abort()},e.exports=g},function(e,t){e.exports=require("https")},function(e,t,s){"use strict";var i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var s in e)Object.hasOwnProperty.call(e,s)&&(t[s]=e[s]);return t.default=e,t},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),Array.prototype.remove&&(Array.prototype.remove=function(e){return this.filter(t=>t!==e)});class n{constructor(e,t,s){this.connectedPlayerIDs=[],this.id=t,this.currentSessionData=new e(s)}get CurrentPlayerCount(){return this.connectedPlayerIDs.length}HasPlayerInSession(e){return this.connectedPlayerIDs.indexOf(e)>-1}AddPlayerByID(e){return this.HasPlayerInSession(e)?(console.error(`[SessionServer] Player ${e} is already part of session ${this.id} (current players: ${this.connectedPlayerIDs.join(", ")})`),!1):(this.connectedPlayerIDs.push(e),!0)}RemovePlayerByID(e){return this.HasPlayerInSession(e)?(this.connectedPlayerIDs.splice(this.connectedPlayerIDs.indexOf(e),1),!0):(console.error(`[SessionServer] Player ${e} is not part of session ${this.id} (current players: ${this.connectedPlayerIDs.join(", ")})`),!1)}Update(e,t){return this.HasPlayerInSession(e)?(this.currentSessionData.Update(t),!0):(console.error(`[SessionServer] Player ${e} is not part of session ${this.id} and therefore can't update the session (current players: ${this.connectedPlayerIDs.join(", ")})`),!1)}GetData(){return this.currentSessionData}ForEachPlayer(e){this.connectedPlayerIDs.forEach(e)}}const r=i(s(3)),a=i(s(14)),c=o(s(40));class h{constructor(e,t){this.commands={},this.nextSessionID=0,this.sessions={},this.nextPlayerID=0,this.player={},this.port=-1,this.port=t,this.sessionType=e,this.httpServer=c.default(r.createServer(()=>{})),this.wsServer=new a.server({httpServer:this.httpServer})}validateSessionID(e,t,s){return"number"!=typeof t?(console.error(`[SessionServer] ${s} requires a 'sessionID'-parameter as number! (supplied: ${t} [${typeof t}])`),this.sendMessageToPlayer(e,JSON.stringify({command:s,sessionID:-1})),!1):!!this.sessions[t]||(console.error(`[SessionServer] Attemping to run ${s} on session '${t}' will fail, as the session doesn't exist`),this.sendMessageToPlayer(e,JSON.stringify({command:s,sessionID:-2})),!1)}setupCommands(){this.commands.createSession=((e,t)=>{const s=this.generateSessionID();if(this.sessions[s]=new n(this.sessionType,s,t.parameters),!this.sessions[s].AddPlayerByID(e))return console.error(`[SessionServer] Unable to add player ${e} to newly created session ${s}`),void this.sendMessageToPlayer(e,JSON.stringify({command:"sessionJoin",sessionID:-1,session:{}}));console.log(`[SessionServer] Created new session with ID ${s}`),this.sendMessageToPlayer(e,JSON.stringify({command:"sessionJoin",sessionID:s,session:this.sessions[s].GetData()}))}),this.commands.updateSession=((e,t)=>{console.log(`[SessionServer] Player ${e} attempting to update session ${t.sessionID}`),this.validateSessionID(e,t.sessionID,"sessionUpdate")&&(this.sessions[t.sessionID].Update(e,t.parameters)||this.sendMessageToPlayer(e,JSON.stringify({command:"sessionUpdate",sessionID:-3})),this.sessions[t.sessionID].ForEachPlayer((e=>{this.sendMessageToPlayer(e,JSON.stringify({command:"sessionUpdate",sessionID:t.sessionID,session:this.sessions[t.sessionID].GetData()}))}).bind(this)))}),this.commands.joinSession=((e,t)=>{(-1==t.sessionID||this.validateSessionID(e,t.sessionID,"sessionJoin"))&&(-1==t.sessionID&&(t.sessionID=this.nextSessionID-1),this.validateSessionID(e,t.sessionID,"sessionJoin")&&(this.sessions[t.sessionID].AddPlayerByID(e)?this.sendMessageToPlayer(e,JSON.stringify({command:"sessionJoin",sessionID:t.sessionID,session:this.sessions[t.sessionID].GetData()})):this.sendMessageToPlayer(e,JSON.stringify({command:"sessionJoin",sessionID:-3}))))}),this.commands.leaveSession=((e,t)=>{this.validateSessionID(e,t.sessionID,"sessionLeave")&&(this.sessions[t.sessionID].RemovePlayerByID(e)?(console.log(`[SessionServer] Players left in session ${t.sessionID}: ${this.sessions[t.sessionID].CurrentPlayerCount}`),this.sessions[t.sessionID].CurrentPlayerCount||(console.log(`[SessionServer] Session ${t.sessionID} has no players left; discarding it`),delete this.sessions[t.sessionID]),this.sendMessageToPlayer(e,JSON.stringify({command:"sessionLeave",sessionID:t.sessionID}))):this.sendMessageToPlayer(e,JSON.stringify({command:"sessionLeave",sessionID:-3})))})}generatePlayerMessageHandler(e){return t=>{if("utf8"===t.type)try{const s=JSON.parse(t.utf8Data);this.handleMessage(e,s)}catch(e){console.group("Invalid JSON string received!"),console.error(t),console.error(e),console.groupEnd()}}}generatePlayerCloseHandler(e){return(t,s)=>{this.removePlayer(e)}}removePlayer(e){console.log(`[SessionServer] Connection from player ${e} closed...`);for(const t in this.sessions)this.commands.leaveSession.apply(this,[e,{sessionID:parseInt(t)}]);delete this.player[e]}handleNewPlayer(e){const t=e.accept(void 0,e.origin),s=this.generatePlayerID();this.player[s]=t,this.player[s].on("message",this.generatePlayerMessageHandler(s)),this.player[s].on("close",this.generatePlayerCloseHandler(s))}static Create(e,t){return new Promise((s,i)=>{const o=new h(e,t);o.setupCommands(),o.wsServer.on("request",o.handleNewPlayer.bind(o)),o.httpServer.on("listening",()=>{console.log(`[SessionServer] Listening on port ${o.port}...`),s(o)}),o.wsServer.on("error",()=>{console.group("[SessionServer] Error initializing server!"),i()}),o.httpServer.listen(o.port)})}Shutdown(){return new Promise((e,t)=>{this.httpServer.shutdown(()=>{e()})})}Running(){return this.httpServer.shutdown()}generatePlayerID(){return this.nextPlayerID++}generateSessionID(){return this.nextSessionID++}handleMessage(e,t){t.command&&("function"==typeof this.commands[t.command]?this.commands[t.command].apply(this,[e,t]):console.error(`[SessionServer] no command called "${t.command}" available`))}sendMessageToPlayer(e,t){return this.player[e]?(this.player[e].send(t),!0):(console.error(`[SessionServer] No player with ID ${e} is connected!`),!1)}}t.SessionServer=h},function(e,t,s){e.exports=s(15)},function(e,t,s){e.exports={server:s(16),client:s(11),router:s(29),frame:s(10),request:s(7),connection:s(4),w3cwebsocket:s(31),deprecation:s(37),version:s(38)}},function(e,t,s){var i=s(2).extend,o=s(2),n=s(1),r=s(5)("websocket:server"),a=s(0).EventEmitter,c=s(7),h=function(e){a.call(this),this._handlers={upgrade:this.handleUpgrade.bind(this),requestAccepted:this.handleRequestAccepted.bind(this),requestResolved:this.handleRequestResolved.bind(this)},this.connections=[],this.pendingRequests=[],e&&this.mount(e)};n.inherits(h,a),h.prototype.mount=function(e){if(this.config={httpServer:null,maxReceivedFrameSize:65536,maxReceivedMessageSize:1048576,fragmentOutgoingMessages:!0,fragmentationThreshold:16384,keepalive:!0,keepaliveInterval:2e4,dropConnectionOnKeepaliveTimeout:!0,keepaliveGracePeriod:1e4,useNativeKeepalive:!1,assembleFragments:!0,autoAcceptConnections:!1,ignoreXForwardedFor:!1,disableNagleAlgorithm:!0,closeTimeout:5e3},i(this.config,e),!this.config.httpServer)throw new Error("You must specify an httpServer on which to mount the WebSocket server.");Array.isArray(this.config.httpServer)||(this.config.httpServer=[this.config.httpServer]);var t=this._handlers.upgrade;this.config.httpServer.forEach(function(e){e.on("upgrade",t)})},h.prototype.unmount=function(){var e=this._handlers.upgrade;this.config.httpServer.forEach(function(t){t.removeListener("upgrade",e)})},h.prototype.closeAllConnections=function(){this.connections.forEach(function(e){e.close()}),this.pendingRequests.forEach(function(e){process.nextTick(function(){e.reject(503)})})},h.prototype.broadcast=function(e){Buffer.isBuffer(e)?this.broadcastBytes(e):"function"==typeof e.toString&&this.broadcastUTF(e)},h.prototype.broadcastUTF=function(e){this.connections.forEach(function(t){t.sendUTF(e)})},h.prototype.broadcastBytes=function(e){this.connections.forEach(function(t){t.sendBytes(e)})},h.prototype.shutDown=function(){this.unmount(),this.closeAllConnections()},h.prototype.handleUpgrade=function(e,t){var s=new c(t,e,this.config);try{s.readHandshake()}catch(e){return s.reject(e.httpCode?e.httpCode:400,e.message,e.headers),void r("Invalid handshake: %s",e.message)}this.pendingRequests.push(s),s.once("requestAccepted",this._handlers.requestAccepted),s.once("requestResolved",this._handlers.requestResolved),!this.config.autoAcceptConnections&&o.eventEmitterListenerCount(this,"request")>0?this.emit("request",s):this.config.autoAcceptConnections?s.accept(s.requestedProtocols[0],s.origin):s.reject(404,"No handler is configured to accept the connection.")},h.prototype.handleRequestAccepted=function(e){var t=this;e.once("close",function(s,i){t.handleConnectionClose(e,s,i)}),this.connections.push(e),this.emit("connect",e)},h.prototype.handleConnectionClose=function(e,t,s){var i=this.connections.indexOf(e);-1!==i&&this.connections.splice(i,1),this.emit("close",e,t,s)},h.prototype.handleRequestResolved=function(e){var t=this.pendingRequests.indexOf(e);-1!==t&&this.pendingRequests.splice(t,1)},e.exports=h},function(e,t,s){function i(){var e;try{e=t.storage.debug}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e}(t=e.exports=s(6)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(e){var s=this.useColors;if(e[0]=(s?"%c":"")+this.namespace+(s?" %c":" ")+e[0]+(s?"%c ":" ")+"+"+t.humanize(this.diff),!s)return;var i="color: "+this.color;e.splice(1,0,i,"color: inherit");var o=0,n=0;e[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&"%c"===e&&(n=++o)}),e.splice(n,0,i)},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=i,t.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(i())},function(e,t){var s=1e3,i=60*s,o=60*i,n=24*o,r=365.25*n;function a(e,t,s){if(!(e<t))return e<1.5*t?Math.floor(e/t)+" "+s:Math.ceil(e/t)+" "+s+"s"}e.exports=function(e,t){t=t||{};var c=typeof e;if("string"===c&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(!t)return;var a=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return a*r;case"days":case"day":case"d":return a*n;case"hours":case"hour":case"hrs":case"hr":case"h":return a*o;case"minutes":case"minute":case"mins":case"min":case"m":return a*i;case"seconds":case"second":case"secs":case"sec":case"s":return a*s;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}(e);if("number"===c&&!1===isNaN(e))return t.long?function(e){return a(e,n,"day")||a(e,o,"hour")||a(e,i,"minute")||a(e,s,"second")||e+" ms"}(e):function(e){if(e>=n)return Math.round(e/n)+"d";if(e>=o)return Math.round(e/o)+"h";if(e>=i)return Math.round(e/i)+"m";if(e>=s)return Math.round(e/s)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,s){var i=s(20),o=s(1);(t=e.exports=s(6)).init=function(e){e.inspectOpts={};for(var s=Object.keys(t.inspectOpts),i=0;i<s.length;i++)e.inspectOpts[s[i]]=t.inspectOpts[s[i]]},t.log=function(){return r.write(o.format.apply(o,arguments)+"\n")},t.formatArgs=function(e){var s=this.namespace;if(this.useColors){var i=this.color,o="  [3"+i+";1m"+s+" [0m";e[0]=o+e[0].split("\n").join("\n"+o),e.push("[3"+i+"m+"+t.humanize(this.diff)+"[0m")}else e[0]=(new Date).toUTCString()+" "+s+" "+e[0]},t.save=function(e){null==e?delete process.env.DEBUG:process.env.DEBUG=e},t.load=a,t.useColors=function(){return"colors"in t.inspectOpts?Boolean(t.inspectOpts.colors):i.isatty(n)},t.colors=[6,2,3,4,5,1],t.inspectOpts=Object.keys(process.env).filter(function(e){return/^debug_/i.test(e)}).reduce(function(e,t){var s=t.substring(6).toLowerCase().replace(/_([a-z])/g,function(e,t){return t.toUpperCase()}),i=process.env[t];return i=!!/^(yes|on|true|enabled)$/i.test(i)||!/^(no|off|false|disabled)$/i.test(i)&&("null"===i?null:Number(i)),e[s]=i,e},{});var n=parseInt(process.env.DEBUG_FD,10)||2;1!==n&&2!==n&&o.deprecate(function(){},"except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)")();var r=1===n?process.stdout:2===n?process.stderr:function(e){var t;switch(process.binding("tty_wrap").guessHandleType(e)){case"TTY":(t=new i.WriteStream(e))._type="tty",t._handle&&t._handle.unref&&t._handle.unref();break;case"FILE":var o=s(21);(t=new o.SyncWriteStream(e,{autoClose:!1}))._type="fs";break;case"PIPE":case"TCP":var n=s(22);(t=new n.Socket({fd:e,readable:!1,writable:!0})).readable=!1,t.read=null,t._type="pipe",t._handle&&t._handle.unref&&t._handle.unref();break;default:throw new Error("Implement me. Unknown stream file type!")}return t.fd=e,t._isStdio=!0,t}(n);function a(){return process.env.DEBUG}t.formatters.o=function(e){return this.inspectOpts.colors=this.useColors,o.inspect(e,this.inspectOpts).split("\n").map(function(e){return e.trim()}).join(" ")},t.formatters.O=function(e){return this.inspectOpts.colors=this.useColors,o.inspect(e,this.inspectOpts)},t.enable(a())},function(e,t){e.exports=require("tty")},function(e,t){e.exports=require("fs")},function(e,t){e.exports=require("net")},function(e,t,s){
/*!
 * Copied from:
 * ws: a node.js websocket client
 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */
try{e.exports=s(!function(){var e=new Error("Cannot find module '../build/Release/bufferutil'");throw e.code="MODULE_NOT_FOUND",e}())}catch(t){try{e.exports=s(!function(){var e=new Error("Cannot find module '../build/default/bufferutil'");throw e.code="MODULE_NOT_FOUND",e}())}catch(t){try{e.exports=s(24)}catch(e){throw console.error("bufferutil.node seems to not have been built. Run npm install."),e}}}},function(e,t){
/*!
 * Copied from:
 * ws: a node.js websocket client
 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */
e.exports.BufferUtil={merge:function(e,t){for(var s=0,i=0,o=t.length;i<o;++i){var n=t[i];n.copy(e,s),s+=n.length}},mask:function(e,t,s,i,o){for(var n=t.readUInt32LE(0),r=0;r<o-3;r+=4){var a=n^e.readUInt32LE(r);a<0&&(a=4294967296+a),s.writeUInt32LE(a,i+r)}switch(o%4){case 3:s[i+r+2]=e[r+2]^t[2];case 2:s[i+r+1]=e[r+1]^t[1];case 1:s[i+r]=e[r]^t[0]}},unmask:function(e,t){for(var s=t.readUInt32LE(0),i=e.length,o=0;o<i-3;o+=4){var n=s^e.readUInt32LE(o);n<0&&(n=4294967296+n),e.writeUInt32LE(n,o)}switch(i%4){case 3:e[o+2]=e[o+2]^t[2];case 2:e[o+1]=e[o+1]^t[1];case 1:e[o]=e[o]^t[0]}}}},function(e,t,s){var i=s(26).Buffer,o=s(0).EventEmitter,n=s(2).bufferAllocUnsafe;function r(e){if(!(this instanceof r))return new r(e);o.call(this);var t=this;void 0===e&&(e={}),t.encoding=e.encoding;var s={next:null,buffer:null},a={next:null,buffer:null},c=0;t.__defineGetter__("length",function(){return c});var h=0;t.write=function(e){return s.buffer?(a.next={next:null,buffer:e},a=a.next):(s.buffer=e,a=s),c+=e.length,t.emit("write",e),!0},t.end=function(e){i.isBuffer(e)&&t.write(e)},t.push=function(){return[].concat.apply([],arguments).forEach(t.write),t},t.forEach=function(e){if(!s.buffer)return n(0);if(s.buffer.length-h<=0)return t;for(var i={buffer:s.buffer.slice(h),next:s.next};i&&i.buffer;){if(e(i.buffer))break;i=i.next}return t},t.join=function(e,i){if(!s.buffer)return n(0);void 0==e&&(e=0),void 0==i&&(i=t.length);var o=n(i-e),r=0;return t.forEach(function(t){if(e<r+t.length&&r<i&&t.copy(o,Math.max(0,r-e),Math.max(0,e-r),Math.min(t.length,i-r)),(r+=t.length)>i)return!0}),o},t.joinInto=function(e,i,o,r){if(!s.buffer)return new n(0);void 0==o&&(o=0),void 0==r&&(r=t.length);var a=e;if(a.length-i<r-o)throw new Error("Insufficient space available in target Buffer.");var c=0;return t.forEach(function(e){if(o<c+e.length&&c<r&&e.copy(a,Math.max(i,i+c-o),Math.max(0,o-c),Math.min(e.length,r-c)),(c+=e.length)>r)return!0}),a},t.advance=function(e){for(h+=e,c-=e;s.buffer&&h>=s.buffer.length;)h-=s.buffer.length,s=s.next?s.next:{buffer:null,next:null};return null===s.buffer&&(a={next:null,buffer:null}),t.emit("advance",e),t},t.take=function(e,s){void 0==e?e=t.length:"number"!=typeof e&&(s=e,e=t.length);if(s||(s=t.encoding),s){var i="";return t.forEach(function(t){if(e<=0)return!0;i+=t.toString(s,0,Math.min(e,t.length)),e-=t.length}),i}return t.join(0,e)},t.toString=function(){return t.take("binary")}}e.exports=r,e.exports.BufferList=r,s(1).inherits(r,o)},function(e,t){e.exports=require("buffer")},function(e,t,s){
/*!
 * UTF-8 Validation Code originally from:
 * ws: a node.js websocket client
 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */
try{e.exports=s(!function(){var e=new Error("Cannot find module '../build/Release/validation'");throw e.code="MODULE_NOT_FOUND",e}())}catch(t){try{e.exports=s(!function(){var e=new Error("Cannot find module '../build/default/validation'");throw e.code="MODULE_NOT_FOUND",e}())}catch(t){try{e.exports=s(28)}catch(e){throw console.error("validation.node seems not to have been built. Run npm install."),e}}}},function(e,t){
/*!
 * UTF-8 Validation Fallback Code originally from:
 * ws: a node.js websocket client
 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */
e.exports.Validation={isValidUTF8:function(){return!0}}},function(e,t,s){var i=s(2).extend,o=s(1),n=s(0).EventEmitter,r=s(30);function a(e){n.call(this),this.config={server:null},e&&i(this.config,e),this.handlers=[],this._requestHandler=this.handleRequest.bind(this),this.config.server&&this.attachServer(this.config.server)}o.inherits(a,n),a.prototype.attachServer=function(e){if(!e)throw new Error("You must specify a WebSocketServer instance to attach to.");this.server=e,this.server.on("request",this._requestHandler)},a.prototype.detachServer=function(){if(!this.server)throw new Error("Cannot detach from server: not attached.");this.server.removeListener("request",this._requestHandler),this.server=null},a.prototype.mount=function(e,t,s){if(!e)throw new Error("You must specify a path for this handler.");if(t||(t="____no_protocol____"),!s)throw new Error("You must specify a callback for this handler.");if(!((e=this.pathToRegExp(e))instanceof RegExp))throw new Error("Path must be specified as either a string or a RegExp.");var i=e.toString();if(t=t.toLocaleLowerCase(),-1!==this.findHandlerIndex(i,t))throw new Error("You may only mount one handler per path/protocol combination.");this.handlers.push({path:e,pathString:i,protocol:t,callback:s})},a.prototype.unmount=function(e,t){var s=this.findHandlerIndex(this.pathToRegExp(e).toString(),t);if(-1===s)throw new Error("Unable to find a route matching the specified path and protocol.");this.handlers.splice(s,1)},a.prototype.findHandlerIndex=function(e,t){t=t.toLocaleLowerCase();for(var s=0,i=this.handlers.length;s<i;s++){var o=this.handlers[s];if(o.pathString===e&&o.protocol===t)return s}return-1},a.prototype.pathToRegExp=function(e){return"string"==typeof e&&("*"===e?e=/^.*$/:(e=e.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),e=new RegExp("^"+e+"$"))),e},a.prototype.handleRequest=function(e){var t=e.requestedProtocols;0===t.length&&(t=["____no_protocol____"]);for(var s=0;s<t.length;s++)for(var i=t[s].toLocaleLowerCase(),o=0,n=this.handlers.length;o<n;o++){var a=this.handlers[o];if(a.path.test(e.resourceURL.pathname)&&(i===a.protocol||"*"===a.protocol)){var c=new r(e,i);return void a.callback(c)}}e.reject(404,"No handler is available for the given request.")},e.exports=a},function(e,t,s){var i=s(1),o=s(0).EventEmitter;function n(e,t){o.call(this),this.webSocketRequest=e,this.protocol="____no_protocol____"===t?null:t,this.origin=e.origin,this.resource=e.resource,this.resourceURL=e.resourceURL,this.httpRequest=e.httpRequest,this.remoteAddress=e.remoteAddress,this.webSocketVersion=e.webSocketVersion,this.requestedExtensions=e.requestedExtensions,this.cookies=e.cookies}i.inherits(n,o),n.prototype.accept=function(e,t){var s=this.webSocketRequest.accept(this.protocol,e,t);return this.emit("requestAccepted",s),s},n.prototype.reject=function(e,t,s){this.webSocketRequest.reject(e,t,s),this.emit("requestRejected",this)},e.exports=n},function(e,t,s){var i=s(11),o=s(32),n=s(34);const r=0,a=1,c=2,h=3;function l(e,t,s,o,c,l){n.EventTarget.call(this),(l=l||{}).assembleFragments=!0;var g=this;this._url=e,this._readyState=r,this._protocol=void 0,this._extensions="",this._bufferedAmount=0,this._binaryType="arraybuffer",this._connection=void 0,this._client=new i(l),this._client.on("connect",function(e){(function(e){var t=this;this._readyState=a,this._connection=e,this._protocol=e.protocol,this._extensions=e.extensions,this._connection.on("close",function(e,s){(function(e,t){p.call(this),this._readyState=h,this.dispatchEvent(u(e,t||""))}).call(t,e,s)}),this._connection.on("message",function(e){(function(e){if(e.utf8Data)this.dispatchEvent(d(e.utf8Data));else if(e.binaryData&&"arraybuffer"===this.binaryType){for(var t=e.binaryData,s=new ArrayBuffer(t.length),i=new Uint8Array(s),o=0,n=t.length;o<n;++o)i[o]=t[o];this.dispatchEvent(d(s))}}).call(t,e)}),this.dispatchEvent(new n.Event("open"))}).call(g,e)}),this._client.on("connectFailed",function(){f.call(g)}),this._client.connect(e,t,s,o,c)}function u(e,t){var s=new n.Event("close");return s.code=e,s.reason=t,s.wasClean=void 0===e||1e3===e,s}function d(e){var t=new n.Event("message");return t.data=e,t}function f(){p.call(this),this._readyState=h;try{this.dispatchEvent(new n.Event("error"))}finally{this.dispatchEvent(u(1006,"connection failed"))}}function p(){this._client.removeAllListeners(),this._connection&&this._connection.removeAllListeners()}e.exports=l,Object.defineProperties(l.prototype,{url:{get:function(){return this._url}},readyState:{get:function(){return this._readyState}},protocol:{get:function(){return this._protocol}},extensions:{get:function(){return this._extensions}},bufferedAmount:{get:function(){return this._bufferedAmount}}}),Object.defineProperties(l.prototype,{binaryType:{get:function(){return this._binaryType},set:function(e){if("arraybuffer"!==e)throw new SyntaxError('just "arraybuffer" type allowed for "binaryType" attribute');this._binaryType=e}}}),[["CONNECTING",r],["OPEN",a],["CLOSING",c],["CLOSED",h]].forEach(function(e){Object.defineProperty(l.prototype,e[0],{get:function(){return e[1]}})}),[["CONNECTING",r],["OPEN",a],["CLOSING",c],["CLOSED",h]].forEach(function(e){Object.defineProperty(l,e[0],{get:function(){return e[1]}})}),l.prototype.send=function(e){if(this._readyState!==a)throw new Error("cannot call send() while not connected");if("string"==typeof e||e instanceof String)this._connection.sendUTF(e);else if(e instanceof Buffer)this._connection.sendBytes(e);else{if(!e.byteLength&&0!==e.byteLength)throw new Error("unknown binary data:",e);e=o(e),this._connection.sendBytes(e)}},l.prototype.close=function(e,t){switch(this._readyState){case r:f.call(this),this._client.on("connect",function(s){e?s.close(e,t):s.close()});break;case a:this._readyState=c,e?this._connection.close(e,t):this._connection.close()}}},function(e,t,s){var i=s(33).strict;e.exports=function(e){if(i(e)){var t=Buffer.from(e.buffer);return e.byteLength!==e.buffer.byteLength&&(t=t.slice(e.byteOffset,e.byteOffset+e.byteLength)),t}return Buffer.from(e)}},function(e,t){e.exports=o,o.strict=n,o.loose=r;var s=Object.prototype.toString,i={"[object Int8Array]":!0,"[object Int16Array]":!0,"[object Int32Array]":!0,"[object Uint8Array]":!0,"[object Uint8ClampedArray]":!0,"[object Uint16Array]":!0,"[object Uint32Array]":!0,"[object Float32Array]":!0,"[object Float64Array]":!0};function o(e){return n(e)||r(e)}function n(e){return e instanceof Int8Array||e instanceof Int16Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray||e instanceof Uint16Array||e instanceof Uint32Array||e instanceof Float32Array||e instanceof Float64Array}function r(e){return i[s.call(e)]}},function(e,t,s){e.exports={EventTarget:s(35),Event:s(36)}},function(e,t){function s(){"function"!=typeof this.addEventListener&&(this._listeners={},this.addEventListener=i,this.removeEventListener=o,this.dispatchEvent=n)}function i(e,t){var s,i,o;if(e&&t){for(void 0===(s=this._listeners[e])&&(this._listeners[e]=s=[]),i=0;o=s[i];i++)if(o===t)return;s.push(t)}}function o(e,t){var s,i,o;if(e&&t&&void 0!==(s=this._listeners[e])){for(i=0;o=s[i];i++)if(o===t){s.splice(i,1);break}0===s.length&&delete this._listeners[e]}}function n(e){var t,s,i,o,n,r=!1;if(!e||"string"!=typeof e.type)throw new Error("`event` must have a valid `type` property");e._yaeti&&(e.target=this,e.cancelable=!0);try{e.stopImmediatePropagation=function(){r=!0}}catch(e){}for(t=e.type,s=this._listeners[t]||[],"function"==typeof(i=this["on"+t])&&i.call(this,e),o=0;(n=s[o])&&!r;o++)n.call(this,e);return!e.defaultPrevented}e.exports=s,Object.defineProperties(s.prototype,{listeners:{get:function(){return this._listeners}}})},function(e,t){e.exports=function(e){this.type=e,this.isTrusted=!1,this._yaeti=!0}},function(e,t){var s={disableWarnings:!1,deprecationWarningMap:{},warn:function(e){!this.disableWarnings&&this.deprecationWarningMap[e]&&(console.warn("DEPRECATION WARNING: "+this.deprecationWarningMap[e]),this.deprecationWarningMap[e]=!1)}};e.exports=s},function(e,t,s){e.exports=s(39).version},function(e){e.exports={_args:[["websocket@1.0.28","C:\\prj\\7_typescriptgameserver\\0_git"]],_from:"websocket@1.0.28",_id:"websocket@1.0.28",_inBundle:!1,_integrity:"sha512-00y/20/80P7H4bCYkzuuvvfDvh+dgtXi5kzDf3UcZwN6boTYaKvsrtZ5lIYm1Gsg48siMErd9M4zjSYfYFHTrA==",_location:"/websocket",_phantomChildren:{},_requested:{type:"version",registry:!0,raw:"websocket@1.0.28",name:"websocket",escapedName:"websocket",rawSpec:"1.0.28",saveSpec:null,fetchSpec:"1.0.28"},_requiredBy:["/"],_resolved:"https://registry.npmjs.org/websocket/-/websocket-1.0.28.tgz",_spec:"1.0.28",_where:"C:\\prj\\7_typescriptgameserver\\0_git",author:{name:"Brian McKelvey",email:"theturtle32@gmail.com",url:"https://github.com/theturtle32"},browser:"lib/browser.js",bugs:{url:"https://github.com/theturtle32/WebSocket-Node/issues"},config:{verbose:!1},contributors:[{name:"Iñaki Baz Castillo",email:"ibc@aliax.net",url:"http://dev.sipdoc.net"}],dependencies:{debug:"^2.2.0",nan:"^2.11.0","typedarray-to-buffer":"^3.1.5",yaeti:"^0.0.6"},description:"Websocket Client & Server Library implementing the WebSocket protocol as specified in RFC 6455.",devDependencies:{"buffer-equal":"^1.0.0",faucet:"^0.0.1",gulp:"git+https://github.com/gulpjs/gulp.git#4.0","gulp-jshint":"^2.0.4",jshint:"^2.0.0","jshint-stylish":"^2.2.1",tape:"^4.9.1"},directories:{lib:"./lib"},engines:{node:">=0.10.0"},homepage:"https://github.com/theturtle32/WebSocket-Node",keywords:["websocket","websockets","socket","networking","comet","push","RFC-6455","realtime","server","client"],license:"Apache-2.0",main:"index",name:"websocket",repository:{type:"git",url:"git+https://github.com/theturtle32/WebSocket-Node.git"},scripts:{gulp:"gulp",install:"(node-gyp rebuild 2> builderror.log) || (exit 0)",test:"faucet test/unit"},version:"1.0.28"}},function(e,t,s){"use strict";var i=s(3),o=s(12);function n(e){var t={},s=!1,i=0;function o(e,i){(i||e._isIdle&&s)&&(e.destroy(),delete t[e._connectionId])}function n(e){var s=i++;e._isIdle=!0,e._connectionId=s,t[s]=e,e.on("close",function(){delete t[s]})}function r(i,n){s=!0,e.close(function(e){n&&process.nextTick(function(){n(e)})}),Object.keys(t).forEach(function(e){o(t[e],i)})}return e.on("request",function(e,t){e.socket._isIdle=!1,t.on("finish",function(){e.socket._isIdle=!0,o(e.socket)})}),e.on("connection",n),e.on("secureConnection",n),e.shutdown=function(e){r(!1,e)},e.forceShutdown=function(e){r(!0,e)},e}(e.exports=n).extend=function(){i.Server.prototype.withShutdown=function(){return n(this)},o.Server.prototype.withShutdown=function(){return n(this)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,